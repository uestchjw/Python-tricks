# 调用摄像头
    cam = cv2.VideoCapture(0)
    id,frame = cam.read()   # frame是读到的图片




# 对于图像resize

    image = (600,800）的一张图像
    
    b = cv2.resize(image, dtype , fx=,fy = )
    # fx,fy是比例系数，如果是0.5，那么就是原图的一半大小
    # 注意dtype是必须的，如果不想用，就给None
    # 注意：给dtype时候，是在画图坐标系下的，即原点在左上角，向右为x轴正方向，向下为y轴正方向，如(200,500)，那么就是左右长200，上下长500
    

# 对于图像rotate
    
    有2种方法旋转：
    
     1# 简单的: imutils
        
        import imutils
        b = imutils.rotate(a,45)               # 逆时针旋转45度，这样旋转后的图像大小不变，因此会损失部分边缘
        b = imutils.rotate_bound(a,45)         # 顺时针旋转45度，这样旋转后，图像变大，原图像都会被保存下来
        
        
     2# 较复杂的：cv2
     
        import cv2
        c1,c2 = a.shape[0] //2,a.shape[1]//2   # 图像中心，也是旋转中心
        M = cv2.getRotationMatrix2D((c1,c2),45,1) # M是旋转矩阵，逆时针旋转45度，最后的1是说和原图像大小一样
        k = cv2.warpAffine(a,M,a.shape)        
        
        


# 关于边缘检测，图像梯度，各类算子
   
   # 对于边缘检测：检测边缘前，需要高斯滤波消除噪声，因此导数对噪声很敏感
                                              Canny方法和Sobel方法的区别
                                              Canny方法得到的是较为连续的轮廓，并且只有0和255，即是轮廓和不是轮廓
                                              Sobel方法得到的连续性不是很好，并且由于Sobel算子得到的梯度值没有截断，因此不只有0和255
                                              canny方法原理：比如之前先是用Sobel算子提取梯度+非极大值抑制，将非极大值的点置为0，最后用上下2个阈值再提取一波，大于high的变成255，
                                                            小于low的变成0，low和high之间的，看看旁边有无255，考虑连接
                                              
                                              canny = cv2.Canny(Img,low_threshold,high_threshold)   一般high是low的2-3倍



                                              edges = cv2.Sobel(Img,cv2.CV_16S,1,1)  # 这种同时上下左右梯度的，最后的轮廓有点暗
                                              edges = cv2.convertScaleAbs(edges)     # 要转换成0-255区间的灰度值，即uint8数据格式
                                              plt.imshow(edges)


                                              x = cv2.Sobel(visible_gray,cv2.CV_16S,1,0)    # 这种x，y方向分开检测再合并的，结果比较亮
                                              y = cv2.Sobel(visible_gray,cv2.CV_16S,0,1)
                                              absx = cv2.convertScaleAbs(x)
                                              absy = cv2.convertScaleAbs(y)
                                              dst = cv2.addWeighted(absx,0.5,absy,0.5,0)    # 0是gamma，加权的常数项
  
  
  # 对于非极大值抑制：NMS : Non-maximum Suppression
      
      核心思想：在同一位置及其一定邻域范围内，只有1个最优解
  
      应用场景很广：如 1# canny检测器最后的角点细化、2# 物体检测由候选框得到最优框
      
      1# 简单来说，就是已知一点的梯度方向，那么在以它为中心的9点矩形内，梯度直线和矩形的边界有2个交点，这两个点的梯度值可以通过插值得到，如果这一点的梯度值是最大的，那么保留作为角点，
         否则去除这个角点
      
      2# 目标检测会在同一位置产生大量候选框。假设有n个候选框组合集合H,要得到最优框集合M，那么首先将H排序，将得分最高的那个候选框max移动到M中，然后计算H中剩下所有框和max的交并比IOU，大于某个阈值，
         即认为该框和max框重复了，去除掉；然后再从H中选出max，重复操作，
  
                                              
  # 对于各类算子： Sobel算子 Gx = [-1 0 1         Gy = [-1 -2 -1       梯度值 = Gx*A 和 Gy*A 的二范数，梯度方向 = arctan(Gy/Gx)
                                  -2 0 2                0  0  0
                                  -1 0 1]               1  2  1]
                   Prewitt算子： Gx = [-1 0 1     Gy = [-1 -1 -1
                                       -1 0 1            0  0  0
                                       -1 0 1]           1  1  1]
                   Roberts算子： Gx = [-1 0       Gy = [0 -1            Roberts算子对正负45度的边缘提取效果较好
                                       0 1 ]            1  0]
                                       
                   Laplacian算子： 二阶微分算子，分为四邻域和八邻域的    很少用于边缘检测，多是锐化操作
                                    H = [ 0 -1 0               H = [-1 -1 -1
                                          -1 4 -1                   -1  8 -1
                                          0 -1 0]                   -1 -1 -1]








# 运动模糊的问题
  摄像头静止，拍摄我的头，而我的头在晃，那么得到img的背景不会模糊，人头会模糊
   

# 要想让图片小一点的显示，2种方法：

  cv2.namedWindow('a',0)
  cv2.resizeWindow('a',600,500)
  cv2.imshow('a',img)
  cv2.waitKey(0)

  或者在图像本身就缩小
  img = cv2.resize(img,(600,500))


# 0是黑色，255是白色，好人还是多的
  img[0:100,:] = 0
  # 结果是图像上面100行变黑，证明和矩阵的格式是一样的




# cv2.imread 可以读入.jpeg的图片，但是路径绝对不可以是中文的，路径中间可以有空格
  cv2.imwrite('D:/Neural Network/hjw_test/SeiralShooting_pictures'+'/'+str(i)+'.jpg',img)
    imwrite 保存图片时一定要有扩展名

