

真的感觉自己python基础好差啊，很多基本的操作都不会，正好趁这个机会加强一下


在MATLAB中，atan(0/0)不存在，atan(5/0) = pi/2，atan(-5/0) = -pi/2
这点和python不一样，在复现的时候可能出错，要重点关注一下

matlab中，parfor是多线并行的意思，但是不能打断点，需要把parfor改成for即可

from numpy import random

# 关于画图
    import matplotlib.pyplot as plt
    
    # 注意：numpy中坐标原点在左上角，(x,y),x是上下的距离，y是左右的距离；
            在plt.plot 和plt.quiver画箭头时要注意，可以认为原点在左上角，(x,y),x是左右的距离，y是上下的距离
            其实画图坐标系是这样的：横轴（x轴），原点0在左边；纵轴（y轴），原点0在上面
    
    plt.subplot(121)
    plt.imshow(a,cmap='gray')   # 灰度图显示
    
    plt.show()
    
    
    # 画箭头
    plt.quiver(x,y,rx,ry,color='',scale=100)  注意：scale越小，箭头长度越长 x,y是在哪一点绘制箭头，rx,ry是箭头的方向，rx,ry的大小也会影响箭头的长度




# 实现将数组按第2列由小到大排列
    a = random.randint(0,10,size=(8,2))
    print(a)
    
# np.argsort默认由小到大，返回index
    b = a[np.argsort(a[:,1]),:]
    print()
    print(b)



# 对于命名问题：
    变量，自定义函数，命名一定要清楚，绝对不要和系统自带函数名相近，有一次调了一周就是这个原因
    格外注意vscode提供的补全功能，很可能没注意，补得就是另一个相似的变量或函数，有一次调了15分钟时这个原因




# 如何在python中导入.mat文件
    from scipy.io import loadmat
    path = 'D:/Neural Network/Sun_liguo/Matlab/BW.mat'
    a = loadmat(path) 
    # 这样导入后，a是个字典，因为可能.mat文件中有多个变量，要想真正导入成numpy格式，还需要
    a = a['BW']





# 常见报错：
       keyerror 0 : 原因是索引的键值在字典中不存在
       RuntimeWarning: Mean of empty slice
       RuntimeWarning: invalid value encountered in double_scalars ：原因是出现了分母为0，但是没有报错，解决办法是判断一下分母=0
       Backend Qt5Agg is interactive backend. Turning interactive mode on：原因是 plt.imshow(I1,cmap='gray') 后面没有加plt.show(),所以显示不了图像
       
       
       

# 不要忘了处理异常，即如果要求给定一定范围内的值，但给的值超出了范围
      边界条件
      分母 = 0 同样需要考虑


# python的乘除法是左优先
      a = 1/2*3 # 结果是1.5
      
      
  乘方比乘除优先级高
      a = 2*3**2   # 结果是18


# python创建复数
      a = complex(1,2) 
      # 结果是：a=1+2j
      
      查看复角
      b = np.angle(a) # 这样结果是弧度制
      b = b*180/pi    # 这样结果是角度制
  

# list和numpy转换  
      假设a是numpy型，b是list型
      a = a.tolist()
      c = np.array(b)
      
# 一个很大的问题是：人的思维是二维矩阵，Matlab格式为a[1:3,5]这样切片就取出来了一部分，在python中如何这样做呢？
  个人建议：把list型转换成numpy型
  
            a = [[1,2],[3,4],[5,6]]
            b = np.array(a)
            print(b,b.shape)
            c = b**2
            print(c)
            
            a = [1,2,3,4,5]
            b = [6,7,8,9,10]
            a = np.array(a)
            b = np.array(b)

            a = np.reshape(a,(-1,1))
            b = np.reshape(b,(-1,1))
            print(a)
            print(b)
            c = np.hstack((a,b))
            print(c)
            print(c.shape)
            # 结果是：  [[ 1  6]
                        [ 2  7]
                        [ 3  8]
                        [ 4  9]
                        [ 5 10]]
                        (5, 2)
            d = c[1:3,:]
            # 结果是：[[2 7]
                       [3 8]]          
                       
                       
                       
# 找到list中符合条件的所有元素的下标
      b = [i for i,x in enumerate(a) if x==5]
  
  接着如何从原矩阵中提取出符合条件的元素呢？ 注意不能直接a[b]这样会报错
  c = []
  for j in b:
      c.append(a[j])
  
  
  
  
  


# 找到list的最大值的下标
      b = a.index(max(a))  注意：这样只会返回第一个发现的最大值的下标
      
      # 如何返回有多个最大值的下标？
      a = [12,3,4,5,12]
      b = [i for i,x in enumerate(a) if x==max(a)]
      # 结果是b=[0,4]



# 如何找到numpy的最大值和下标
      一维numpy：np.argmax()，返回最大值的下标
                 a = np.array([1,232,4,54])
                 b = np.argmax(a)  # 结果是b=1
                 
                 如果有多个最大值呢？
                 先变成list，再用上面list的方法
                 
      多维numpy，按行或列搜索最大值
                 a = np.ones((3,4))
                 a[0][1]=5
                 a[1][3]=4
                 a[2][2]=3
                 b = np.argmax(a,axis=1)
                 结果是：a = [[1. 5. 1. 1.]
                              [1. 1. 1. 4.]
                              [1. 1. 3. 1.]]
                         b = [1 3 2]
                 
      
      



# 保存数组
  np.savetxt('aa.txt',numpy,fmt='%d') 按整数形式保存





# python 两个数组对应元素相乘：*   a=np.arange(1,31) b=np.arange(1,31)   a*b
         两个矩阵点乘：a.dot(b)  要求矩阵内维相同，即a的列数=b的行数


# python只能 if:
             elif:    不能else if：
             else:
             
             
             
 
 
 
             
# 弧度和角度的转换
    math.degrees() 转角度
    math.radians() 转弧度
    by the way， 对于二范数计算有个专门的函数 c = math.hypot(a,b) 效果是 c = sqrt(a**2+b**2)
# 对于三角函数
    sin,cos,tan都只能作用于1个数，不能是list，也不能是numpy
    sin(a)是计算弧度a的正弦值
    
    
    对于numpy使用三角函数：
        np有自己的三角函数
        a = np.array([1,2,3,4])
        b = np.sin(a)
        
    对于list使用三角函数：
        for i in range(len(a)):
            a[i] = sin(a[i])










# 字典的基本操作
       a= {'egg':45,'oil':60}
       取出键对应的值：    a['egg']
       查看字典中所有的键：b = a.keys()






# 索引的基本知识
      
      
      # Matlab是step在冒号中间，python是step在最后
      
      # for i in range(5,5): 这样不会执行语句
      
      # 无论正着还是反着，for循环都是到end的前一个停止
         for i in range(5,-1,-1):
             i = 5,4,3,2,1,0

      # 同样的事情发生在矩阵索引a[1:3]和 np.arrange(1,31)上（生成1:30）
      
      # 如何切片包含最后一个或第一个值呢？ a = [1,2,3,4]
            b = a[2:]     # b= [3,4]
            b = a[2::-1]  # b= [3,2,1] 注意:这里不能写成 a[2:-1:-1]那样结果会是[]








# numpy的基本知识

    # 关注numpy的shape
        a = [1,2]
        b = np.array(a)
        # 其实b的shape是(2,),并不是(1,2) b=[1 2]
        
        a = [[1,2],[3,4]]
        b = np.array(a)
        # 那么b的shape是(2,2）
        
        总之，不确定的时候就np.reshape()一下
   
   # numpy展开成一维的
        b = a.flatten() # 这样操作后，a的shape不变
   
        
   # numpy的拼接
       np.vstack()   # v=vertical 垂直
       np.hstack()   # h=horizontal 水平
       可以一次拼接>2个numpy
       
   # numpy的翻转
       b = np.fliplr(a)  将numpy左右翻转
       b = np.flipud(a)  将numpy上下翻转
   
   
   # 对角元素
       a = np.diag(np.array([3,4,5])) 以3,4,5为对角的对角阵
       如果a已经是一个多维矩阵，那么取出对角元素也很简单： 
       b = np.diag(a)
   
   # 查看和改变numpy的数据类型
       a.dtype
       a = a.astype('float32')
       
       
   # 查找numpy中符合条件的元素的下标
       b = np.where(a>0)
       # b是一个tuple 如b[0] = [1,2,3] ,b[1] = [4,5,6]，意思是a[1,4],a[2,5],a[3,6]满足条件
       
       b = a>0                      # 返回一个和a大小一致的numpy，每个元素是True或者False
       b = (a>0).astype('int')      # 返回一个和a大小一致的numpy，是1或者0
       

   # 判断numpy是否含有（全是）某个值
      (a==2).any()    (a==2).all()
    
    
   # 取出数组中符合条件的值，前提是Numpy
       a[a>0] 
    
      
   # 改变numpy中元素的数据类型
        kk = kk.astype(np.float)   
      
      
      
   # 访问numpy中每一个元素：for x in np.nditer(canny):
   
        # print(canny.shape) 
        # (800,600)
        # num = 0
        # for i,x in enumerate(canny):
        #     num += 1
        # 这样num = 800
        
        
        # num = 0
        # for i in canny:
        #     num += 1
        # print(num)    # 这样num还等于800
                
        
        num = 0
        for i in np.nditer(canny):
            num += 1
        print(num)
        # 480000
        
        
   # numpy排序
        b = np.sort(a,-1)  # 按行升序排序
        b = np.sort(a,0)   # 按列升序排序
        
        c = np.argsort(a,-1)  # 按行输出从小到大的index
        c = np.argsort(a,0)   # 按列输出从小到大的index

        
        







# list的基本知识

     # 生成全为1的list,长度为4 
         a = [1*4]*4
         
     # a.extend(b) 将b中的元素一个一个加进去
     # a.appand(b) 将b作为整体加进去
     # 注意，添加单个元素时，要a.append(5) 或 a += [5] 或 a.extend[5]  因为extend和+=都看作是两个list操作
         

     
     # 矩阵的拼接
         2个矩阵可以直接+号拼接 c = a+b
         a矩阵拼接1个值b： a.append(b)
         1个值a拼接矩阵b： [a]+b
     
     # 到矩阵的最后一个元素a[1:],不能a[1:-1],那样取不到最后一个元素
     
     # 关于排序：
         a.sort() 返回值是None
     
     
     
       
     # a = [1,2,3]
       a[0]：是int型
       a[0:1]:是list型


      
     # list的2个元素可以直接交换顺序
        a[i],a[j] = a[j],a[i]
        
        
        
     # 关于copy和是否会改变原矩阵值的思考
         不确定的时候，最好先.copy()一下
         
         a = ['1','2']
         for i in a:
             i = int(i)
         # 这样后，a = ['1','2'] 说明原矩阵值没变，只有通过下标的方式a[i]修改单个元素的值，才会改变
         
         a = [4,4,1]
         a[1:].sort() #对切片排序后，原矩阵也不变
      




# 字符串的基本知识
import string

      # 字符串是不可变的数据类型
         即a = '123'，不能a[1]='5'，只能a = a[0]+'5'+a[2]
      
      # 字符串和数字的转换 int() str()
      
      # 字符串转置：
          a = a[::-1]
      
      # 将字符串转成list  
          a='123' b= list(a)  b = ['1','2','3']
      
      # 转义字符(如\n）算作一个字符

      # 将字符串按某个字符截断：
      a='cherries bananas cherries -\ncherries\n? apples apples - bananas'
      b= a.split('\n')
      结果是：b = ['cherries bananas cherries -', 'cherries', '? apples apples - bananas']

      a = '#67 hj'
      按'#'截断，那么结果是 ['','67 hj']


      在字符串中找到某个字符并返回下标：
      a.find('#')   若找不到，返回-1
      
      # 去除末尾的空格 或者末尾的某个东西
      b = a.rstrip()     #()里面接那个东西

      
      用特定的连接符号连接字符串：
      a=['12', '34', '56']
      '+'.join(a)
      结果是：'12+34+56'
