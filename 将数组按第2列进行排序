from numpy import random
# 实现将数组按第2列由小到大排列
a = random.randint(0,10,size=(8,2))
print(a)
# np.argsort默认由小到大，返回index
b = a[np.argsort(a[:,1]),:]
print()
print(b)

# python创建复数
      a = complex(1,2) 
      # 结果是：a=1+2j
      
      查看复角
      b = np.angle(a) # 这样结果是弧度制
      b = b*180/pi    # 这样结果是角度制
  

# list和numpy转换  
      假设a是numpy型，b是list型
      a.tolist()
      c = np.array(b)
      
# 一个很大的问题是：人的思维是二维矩阵，Matlab格式为a[1:3,5]这样切片就取出来了一部分，在python中如何这样做呢？
            a = [1,2,3,4,5]
            b = [6,7,8,9,10]
            a = np.array(a)
            b = np.array(b)

            a = np.reshape(a,(-1,1))
            b = np.reshape(b,(-1,1))
            print(a)
            print(b)
            c = np.hstack((a,b))
            print(c)
            print(c.shape)
            # 结果是：  [[ 1  6]
                        [ 2  7]
                        [ 3  8]
                        [ 4  9]
                        [ 5 10]]
                        (5, 2)
            d = c[1:3,:]
            # 结果是：[[2 7]
                       [3 8]]          
                       
                       
                       
# 找到list中符合条件的所有元素的下标
      b = [i for i,x in enumerate(a) if x==5]


# 找到list的最大值的下标
      b = a.index(max(a))  注意：这样只会返回第一个发现的最大值的下标
      
      # 如何返回有多个最大值的下标？
      a = [12,3,4,5,12]
      b = [i for i,x in enumerate(a) if x==max(a)]
      # 结果是b=[0,4]

# 如何找到numpy的最大值和下标
      一维numpy：np.argmax()，返回最大值的下标
                 a = np.array([1,232,4,54])
                 b = np.argmax(a)  # 结果是b=1
                 
                 如果有多个最大值呢？
                 先变成list，再用上面list的方法
                 
      多维numpy，按行或列搜索最大值
                 a = np.ones((3,4))
                 a[0][1]=5
                 a[1][3]=4
                 a[2][2]=3
                 b = np.argmax(a,axis=1)
                 结果是：a = [[1. 5. 1. 1.]
                              [1. 1. 1. 4.]
                              [1. 1. 3. 1.]]
                         b = [1 3 2]
                 
      
      



# 保存数组
  np.savetxt('aa.txt',numpy,fmt='%d') 按整数形式保存



# 不要忘了处理异常，即如果要求给定一定范围内的值，但给的值超出了范围

# python 两个数组对应元素相乘：*   a=np.arange(1,31) b=np.arange(1,31)   a*b
         两个矩阵点乘：a.dot(b)  要求矩阵内维相同，即a的列数=b的行数


# python只能 if:
             elif:    不能else if：
             else:
           



# 字典的基本操作
       a= {'egg':45,'oil':60}
       取出键对应的值：    a['egg']
       查看字典中所有的键：b = a.keys()






# 索引的基本知识
      
      
      # Matlab是step在冒号中间，python是step在最后
      
      # for i in range(5,5): 这样不会执行语句
      
      # 无论正着还是反着，for循环都是到end的前一个停止
         for i in range(5,-1,-1):
             i = 5,4,3,2,1,0

      # 同样的事情发生在矩阵索引a[1:3]和 np.arrange(1,31)上（生成1:30）
      
      # 如何切片包含最后一个或第一个值呢？ a = [1,2,3,4]
            b = a[2:]     # b= [3,4]
            b = a[2::-1]  # b= [3,2,1]






# 矩阵的基本知识

     # 生成全为1的list,长度为4 
         a = [1*4]*4
         
     # a.extend(b) 将b中的元素一个一个加进去
     # a.appand(b) 将b作为整体加进去
     # 注意，添加单个元素时，要a.append(5) 或 a += [5] 或 a.extend[5]  因为extend和+=都看作是两个list操作
         
     # 改变数据类型
         kk = kk.astype(np.float)
     
     # 矩阵的拼接
         2个矩阵可以直接+号拼接 c = a+b
         a矩阵拼接1个值b： a.append(b)
         1个值a拼接矩阵b： [a]+b
     
     # 到矩阵的最后一个元素a[1:],不能a[1:-1],那样取不到最后一个元素
     
     # 关于排序：
         a.sort() 返回值是None
     
     
     # 取出数组中符合条件的值，前提是Numpy
       a[a>0]
       
     # a = [1,2,3]
       a[0]：是int型
       a[0:1]:是list型

     # 判断数组是否含有（全是）某个值,前提是numpy
      (a==2).any()    (a==2).all()
      
     # list的2个元素可以直接交换顺序
        a[i],a[j] = a[j],a[i]
        
        
        
     # 关于copy和是否会改变原矩阵值的思考
         不确定的时候，最好先.copy()一下
         
         a = ['1','2']
         for i in a:
             i = int(i)
         # 这样后，a = ['1','2'] 说明原矩阵值没变，只有通过下标的方式a[i]修改单个元素的值，才会改变
         
         a = [4,4,1]
         a[1:].sort() #对切片排序后，原矩阵也不变
      




# 字符串的基本知识
import string

      # 字符串和数字的转换 int() str()
      
      # 字符串转置：
          a = a[::-1]
      
      # 将字符串转成list  
          a='123' b= list(a)  b = ['1','2','3']
      
      # 转义字符(如\n）算作一个字符

      # 将字符串按某个字符截断：
      a='cherries bananas cherries -\ncherries\n? apples apples - bananas'
      b= a.split('\n')
      结果是：b = ['cherries bananas cherries -', 'cherries', '? apples apples - bananas']

      a = '#67 hj'
      按'#'截断，那么结果是 ['','67 hj']


      在字符串中找到某个字符并返回下标：
      a.find('#')   若找不到，返回-1
      
      # 去除末尾的空格 或者末尾的某个东西
      b = a.rstrip()     #()里面接那个东西

      
      用特定的连接符号连接字符串：
      a=['12', '34', '56']
      '+'.join(a)
      结果是：'12+34+56'
