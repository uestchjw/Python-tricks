
# 关于一行写不下：
    用\换行
    e.g. a = 1+2+3\
             +4

# 关于异常：
    可以主动抛出异常，结束代码 raise
    
    e.g. 如果图像配准的点对数少于2，那么就不运行
         a = 1
         if a<2:
            raise Exception('NONONO') # 或者raise ValueError('NONONOaaaaa')都可以
            
# 关于断言：
    assert a>1
    xxx
    # 只有满足a>1时，才会继续执行，否则报错
   
   try:
       fun1()         
   except:
       fun2()


# 关于MATLAB和python的不同点

    1# 在MATLAB中，atan(0/0)不存在，atan(5/0) = pi/2，atan(-5/0) = -pi/2
    这点和python不一样，在复现的时候可能出错，要重点关注一下

    2# MATLAB中，parfor是多线并行的意思，但是不能打断点，需要把parfor改成for即可
    3# MATLAB中，默认是列优先，即展开的时候是先列，后行；对应python a.flatten('F')
    
    4# MATLAB中，a是多维矩阵，a[1]是一个数；python中a是多维numpy，a[1]是一个vector
    
    5# MATLAB中，矩阵数学意义相乘是*，     对应元素相乘是.*
       python中，矩阵数学意义乘是np.dot(), 对应元素相乘是 *

from numpy import random

# 关于数据格式
    1# 只要涉及除法，那么就是float格式，在下标索引时要注意变成int
        a = 4/2 
        # a = 2.0
        
    2# a = np.ones() np.zeros()  格式默认是float64，这样做下标就不行
    
   

# 关于画图
    import matplotlib.pyplot as plt
    
    # 注意：numpy中坐标原点在左上角，向下是x轴正方向，向右是y轴正方向：                                    (x,y),x是上下的距离，y是左右的距离；
            在plt.imshow(I1)后，再进行plt.plot 时要注意，可以认为原点在左上角，向右是x轴正方向，向下是y轴正方向：(x,y),x是左右的距离，y是上下的距离；
            
    
    plt.subplot(121)
    plt.imshow(a,cmap='gray')   # 灰度图显示
    
    plt.show()
    
    
    # 画箭头
    plt.quiver(x,y,rx,ry,color='',scale=100)  注意：scale越小，箭头长度越长 x,y是在哪一点绘制箭头，rx,ry是箭头的方向，rx,ry的大小也会影响箭头的长度
        # 在不进行plt.imshow(I1)时，直接画： x,y,rx,ry都是以左下角为原点，向右向上为正方向的，Matlab和python都是
        # 一旦进行plt.imshow(I1),那么x,y 就是左上角为原点，向右x正方向，向下y正方向，但是rx,ry还是以左下角为原点，向右x正，向上y正的。
        # 而在Matlab中，imshow(I1)后，x,y 就是左上角为原点，向右x正方向，向下y正方向，并且rx,ry也遵从这个坐标系
    
    
    # 画匹配点对（直线）
    p1是第一张图的feature point,p2是第2张图的feature point,并且已经转置了，适合于画图坐标系
    plt.plot(  [p1[:,0],p2[:,0]+leng] , [p1[:,1],p2[:,1]] , color = 'y')
    
    即连接两点a，b成一条直线的逻辑是，plt.plot([ax,bx],[ay,by])
    把两个矩阵拼接起来，勾出feature point，再用plot连线即可




# 实现将数组按第2列由小到大排列
    a = random.randint(0,10,size=(8,2))
    print(a)
    
# np.argsort默认由小到大，返回index
    b = a[np.argsort(a[:,1]),:]
    print(b)


# 对于命名问题：
    变量，自定义函数，命名一定要清楚，绝对不要和系统自带函数名相近，有一次调了一周就是这个原因
    格外注意vscode提供的补全功能，很可能没注意，补得就是另一个相似的变量或函数，有一次调了15分钟时这个原因



# 常见报错：
       keyerror 0 : 原因是索引的键值在字典中不存在
       RuntimeWarning: Mean of empty slice
       RuntimeWarning: invalid value encountered in double_scalars ：原因是出现了分母为0，但是没有报错，解决办法是判断一下分母=0
       Backend Qt5Agg is interactive backend. Turning interactive mode on：原因是 plt.imshow(I1,cmap='gray') 后面没有加plt.show(),所以显示不了图像
       error: (-215:Assertion failed) _src.depth() == CV_8U in function 'cv::Canny'  ：原因是传入canny的必须是CV_8U格式，即np.astype('uint8')
       
       

# 不要忘了处理异常，即如果要求给定一定范围内的值，但给的值超出了范围
      边界条件
      分母 = 0 同样需要考虑

# python的乘除法是左优先
      a = 1/2*3 # 结果是1.5   
      
  乘方比乘除优先级高
      a = 2*3**2   # 结果是18

# python创建复数
      a = complex(1,2) 
      # 结果是：a=1+2j
      
      查看复角
      b = np.angle(a) # 这样结果是弧度制
      b = b*180/pi    # 这样结果是角度制
  
# list和numpy转换  
      假设a是numpy型，b是list型
      a = a.tolist()
      c = np.array(b)
      
# 一个很大的问题是：人的思维是二维矩阵，Matlab格式为a[1:3,5]这样切片就取出来了一部分，在python中如何这样做呢？
  个人建议：把list型转换成numpy型
  
            a = [[1,2],[3,4],[5,6]]
            b = np.array(a)
            print(b,b.shape)
            c = b**2
            print(c)
            
            a = [1,2,3,4,5]
            b = [6,7,8,9,10]
            a = np.array(a)
            b = np.array(b)

            a = np.reshape(a,(-1,1))
            b = np.reshape(b,(-1,1))
            print(a)
            print(b)
            c = np.hstack((a,b))
            print(c)
            print(c.shape)
            # 结果是：  [[ 1  6]
                        [ 2  7]
                        [ 3  8]
                        [ 4  9]
                        [ 5 10]]
                        (5, 2)
            d = c[1:3,:]
            # 结果是：[[2 7]
                       [3 8]]          
                                             
                       
# 找到list中符合条件的所有元素的下标
      b = [i for i,x in enumerate(a) if x==5]
  
  接着如何从原矩阵中提取出符合条件的元素呢？ 注意不能直接a[b]这样会报错
  c = []
  for j in b:
      c.append(a[j])
  
  
# 移除list中的元素
    按元素值：a.remove('2')
    按索引值：a.pop(1)    # a.pop()默认删除最后一个元素
    注意：不要写a = a.remove()，
  
  


# 找到list的最大值的下标
      b = a.index(max(a))  注意：这样只会返回第一个发现的最大值的下标
      
      # 如何返回有多个最大值的下标？
      a = [12,3,4,5,12]
      b = [i for i,x in enumerate(a) if x==max(a)]
      # 结果是b=[0,4]



# 如何找到numpy的最大值和下标
      一维numpy：np.argmax()，返回最大值的下标
                 a = np.array([1,232,4,54])
                 b = np.argmax(a)  # 结果是b=1
                 
                 如果有多个最大值呢？
                 先变成list，再用上面list的方法
                 
      多维numpy，按行或列搜索最大值
                 a = np.ones((3,4))
                 a[0][1]=5
                 a[1][3]=4
                 a[2][2]=3
                 b = np.argmax(a,axis=1)
                 结果是：a = [[1. 5. 1. 1.]
                              [1. 1. 1. 4.]
                              [1. 1. 3. 1.]]
                         b = [1 3 2]
                 
      
# 关于集合

    #
    a = '12345'
    b = set(a) # b的顺序是随机的
    b = sorted(set(a)) 
    # b=['1','2','3','4','5'] 可以用来统计字符串中的元素
    
    #
    a = set('12345')
    b = set('*-+')
    c = a - b
    # c的结果是['1','2','3','4','5']，说明set的减法规则



# 保存数组
  np.savetxt('aa.txt',numpy,fmt='%d') 按整数形式保存
                       
             
# 弧度和角度的转换
    math.degrees() 转角度
    math.radians() 转弧度
    by the way， 对于二范数计算有个专门的函数 c = math.hypot(a,b) 效果是 c = sqrt(a**2+b**2)
# 对于三角函数
    sin,cos,tan都只能作用于1个数，不能是list，也不能是numpy
    sin(a)是计算弧度a的正弦值
    
    
    对于numpy使用三角函数：
        np有自己的三角函数
        a = np.array([1,2,3,4])
        b = np.sin(a)
        
    对于list使用三角函数：
        for i in range(len(a)):
            a[i] = sin(a[i])




# 字典的基本操作
       a= {'egg':45,'oil':60}
       取出键对应的值：    a['egg']
       查看字典中所有的键：b = a.keys()

# 索引的基本知识
        
      # Matlab是step在冒号中间，python是step在最后
      
      # for i in range(5,5): 这样不会执行语句
      
      # 无论正着还是反着，for循环都是到end的前一个停止
         for i in range(5,-1,-1):
             i = 5,4,3,2,1,0

      # 同样的事情发生在矩阵索引a[1:3]和 np.arrange(1,31)上（生成1:30）
      
      # 如何切片包含最后一个或第一个值呢？ a = [1,2,3,4]
            b = a[2:]     # b= [3,4]
            b = a[2::-1]  # b= [3,2,1] 注意:这里不能写成 a[2:-1:-1]那样结果会是[]



# numpy的基本知识

    # 保存和加载numpy
        a = np.ones((3,4))
        np.savetxt('D:/Neural Network/Sun_liguo/hhhhh.txt',a)   # 保存
        b = np.loadtxt('D:/Neural Network/Sun_liguo/hhhhh.txt') # 默认加载的是float数据类型
        
    # 关注numpy的shape
        a = [1,2]
        b = np.array(a)
        # 其实b的shape是(2,),并不是(1,2) b=[1 2]
        
        a = [[1,2],[3,4]]
        b = np.array(a)
        # 那么b的shape是(2,2）
        
        总之，不确定的时候就np.reshape()一下
        
   # 判断numpy是否为空
        a = np.zeros((3,4))
        b = a.size 
        # b = 20，如果b=0,那么a就是空矩阵
   
   # 数组的某些地方赋一个常数，可以直接
        a[0,:] = 1
   
        
   # 删除numpy某些行或列
        b = np.delete(a,[1,2],axis=0)  # 删除行
        b = np.delete(a,[1,2],axis=1)  # 删除列
   
   # numpy展开成一维的
        b = a.flatten()     # 这样操作后，a的shape不变，这样是按行展开
        b = a.flatten('F')  # 这样是按列展开
        # 返回后shape=(8,)，不是标准格式，要小心
        
        注意：a.ravel()展开效果是一样的，但flatten返回是拷贝，不影响原来的值，ravel有风险影响原值
        因此：以后展开都用flatten
        
        
   # 关于索引numpy行或列的问题
        # a.shape = (3,4)
          b = [:,1]
        # b.shape = (3,)
          这样可以直接b[0],b[1],b[2]取出单个元素
   
   
   
   # 对numpy中的每个元素进行数学运算
        b = np.sin(a)
        b = np.cos(a)
        b = np.exp(a)
        b = np.floor(a)
   
   
   # numpy的逆矩阵
        b = np.linalg.inv(a)
   
   # numpy矩阵乘法
         # 数学意义上的矩阵相乘（即内维相同） np.dot()  注意： 1x3 3x4相乘，最后返回的是(1,4)，即标准格式的
         # 对应元素相乘:直接乘 *
        
   # numpy的拼接
       np.vstack()   # v=vertical 垂直
       np.hstack()   # h=horizontal 水平
       np.dstack()   # d = depth   深度拼接
       可以一次拼接>2个numpy
       
       warning！！ 矩阵拼接前，最好reshape一下，要不维度会乱：血的教训
       比如np.hstack(  ( a[:,0], a[:,2])  ) ，得到的结果并不是n行2列的，需要先reshape成(-1,1)再stack
       
       一维numpy拼接一个数时，可以直接拼接1,[1],或者np.array([1])
       
   # numpy的翻转
       b = np.fliplr(a)  将numpy左右翻转
       b = np.flipud(a)  将numpy上下翻转
   
   
   # 对角元素
       a = np.diag(np.array([3,4,5])) 以3,4,5为对角的对角阵
       如果a已经是一个多维矩阵，那么取出对角元素也很简单： 
       b = np.diag(a)
   
   # 查看和改变numpy的数据类型
       a.dtype    # np.ones() np.zeros() 默认是float64格式
       a = a.astype('float32')
       
       
   # 查找numpy中符合条件的元素的下标
       b = np.where(a>0)
       # b是一个tuple 如b[0] = [1,2,3] ,b[1] = [4,5,6]，意思是a[1,4],a[2,5],a[3,6]满足条件
       # 哪怕a是一个一维numpy，b也是个tuple
       
       b = a>0                      # 返回一个和a大小一致的numpy，每个元素是True或者False
       b = (a>0).astype('int')      # 返回一个和a大小一致的numpy，是1或者0
       
       
   # 查找numpy同时满足2个条件的元素的下标
        b = (a>3) * (a<4)           # True 和 False 也可以做乘法
        c = np.where(b==1)          # c 是一个tuple
       

   # 判断numpy是否含有（全是）某个值
      (a==2).any()    (a==2).all()
    
    
   # 取出数组中符合条件的值，前提是Numpy
       a[a>0] 
    
      
   # numpy范数计算
        b = np.linalg.norm(a,ord=2,axis = 1)   # 行向量2范数
        b = np.linalg.norm(a,ord=2,axis = 0)   # 列向量2范数
        b = np.linalg.norm(a,ord=2,axis = None)   # 矩阵范数
        # 默认是ord=2，即二范数
        # linear algebra -> linalg
        # math.hypot(a,b) -> sqrt(a**2+b**2)
   
   # numpy生成随机数
        from numpy import random
        
        1# 生成随机整数 
            random.randint(low,high,size)   # 生成[low,high)内的整数
        
        2# 生成[0,1)之间的浮点数
            random.random(size)
        
        3# 生成给定范围内不重复的数
        
            random.choice(a,size,replace)
            # a是区间，可以是一个numpy，也可以是个数n 即np.arange(0,n)
            # replace设为False时，生成的数不重复
             
      
   # 访问numpy中每一个元素：for x in np.nditer(canny):
   
        # print(canny.shape) 
        # (800,600)
        # num = 0
        # for i,x in enumerate(canny):
        #     num += 1
        # 这样num = 800
        
        
        # num = 0
        # for i in canny:
        #     num += 1
        # print(num)    # 这样num还等于800
                
        
        num = 0
        for i in np.nditer(canny):
            num += 1
        print(num)
        # 480000
        
        
   # numpy排序
        b = np.sort(a,-1)  # 按行升序排序
        b = np.sort(a,0)   # 按列升序排序
        
        c = np.argsort(a,-1)  # 按行输出从小到大的index
        c = np.argsort(a,0)   # 按列输出从小到大的index
  
  
  
  
   # 关于统计numpy不同区间内元素的个数
   
        1# groupby：貌似不是那么符合
        2# pandas的value_counts()
     
        3#   b = np.histogram(a,bins=[0,5,10])
             # 那么返回的b是一个Numpy，包含[0,5),[5,10]区间内元素的个数
             # bins可以是一个list，numpy，也可以是一个int，那样会分成int个区间进行统计
             
            


      





